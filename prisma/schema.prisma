// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}


// model User {
//   id            String          @id @default(cuid())
//   name          String?
//   email         String          @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   posts     Post[]
//   likes     Like[]
//   customName String?
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

model User {
  name          String?
  id            String          @id
  likes         Like[]
  posts         Post[]
}

model Post {
  id        String   @id @default(cuid())
  postTitle     String
  postContent   String
  bookTitle     String
  author    String
  publishedYear Int
  publisher  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  likes         Like[]
  likeCount     Int       @default(0) // Default value for the like count
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Ensure each user can like a post only once
}
